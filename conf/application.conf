# Copyright 2023 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include "backend.conf"

# This is the main configuration file for the application.
# ~~~~~

appName = get-nino-api

# Primary entry point for all HTTP requests on Play applications
play.http.requestHandler = "routing.VersionRoutingRequestHandler"

# Default http client
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.AuthModule"
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientModule"

# Uncomment below lines when previewing yaml file locally in case of CORS errors
# play.filters.enabled += "play.filters.cors.CORSFilter"
# play.filters.cors {
#  allowedOrigins = ["http://localhost:9680"]
# }

# Json error handler
play.http.errorHandler = "utils.ErrorHandler"

# Play Modules
# ~~~~
# Additional play modules can be added here
play.modules.enabled += "config.Module"

# Session configuration
# ~~~~~
application.session.httpOnly = false
application.session.secure = false

# The application languages
# ~~~~~
play.i18n.langs = ["en"]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router = prod.Routes

# Microservice specific config
microservice {

  services {

    auth {
      host = localhost
      port = 8500
    }

    des {
      host = localhost
      port = 9751
      token = some-token
      env = local
      endpoint = "/register"
    }
  }
}

# feature switch values logDesJson and logDwpJson MUST be false in #
# production or any environment where the app receives real PII  #
feature-switch {
  logDesJson = true
  logDwpJson = true
  version-1 {
    enabled = true
  }
}

api {
  status = BETA
  endpointsEnabled = true
  access.type = PRIVATE
}
